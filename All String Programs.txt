All String Programs
-------------------------
1.	Write a program to reverse a given string in Java.

public class Reverse_string {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a string");
		String s=sc.next();
		String rev="";
		for (int i = 0; i < s.length(); i++) {
			rev = s.charAt(i)+rev;
		}
		System.out.println(rev);
	}
}

2.	Develop a Java program to determine whether a given string is a palindrome or not

public class Palindrome_String {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a string");
		String s=sc.next();
		String rev="";
		for (int i = 0; i <s.length(); i++) {
			rev = s.charAt(i)+rev;
			
		}
		if(s.equals(rev))
		{
			System.out.println("given string is palindrome");
		}else
		{
			System.err.println("given string is not palindrome");
		}
	}
}

3.	Write a Java program to count the occurrences of a specific character in a string.

public class Occurance {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("enter a string");
		String s = sc.next();

		for (int i = 0; i < s.length(); i++) {
			int count = 0;
			boolean present = false;
			for (int j = 0; j < i; j++) {
				if (s.charAt(i) == s.charAt(j)) {
					present = true;
					break;
				}
			}
			if (present == false) {
				for (int j = 0; j < s.length(); j++) {
					if (s.charAt(i) == s.charAt(j)) {
						count++;
					}

				}
				System.out.println(s.charAt(i) + " present " + count + " times");
			}

		}

	}
}

4.	Implement a Java function to check whether two strings are anagrams of each other or not.

public class Anagram {

	public static String sort(String s)
	{
		char []ch=s.toCharArray();
		String s1="";
		for (int i = 0; i < ch.length; i++) {
			for (int j = i+1; j < ch.length; j++) {
				if(ch[i]>ch[j])
				{
					char temp=ch[j];
					ch[j]=ch[i];
					ch[i]=temp;
				}
			}
		}
		for (int i = 0; i < ch.length; i++) {
			s1 +=ch[i];
		}
		return s1;
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner (System.in);
		System.out.println("enter a string");
		String s=sc.next();
		System.out.println("enter another string");
		String s1=sc.next();
		String sorted=sort(s);
		String second=sort(s1);
		if(sorted.equals(second))
		{
			System.out.println("given two string are anagram strings");
		}else
		{
			System.err.println("given two string are not anagram strings");
		}
	}
}

5.	Write a Java program to find the first non-repeated (unique) character in a given string.

public class Unique_charecters {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a string ");
		String s=sc.next();
		for (int i = 0; i < s.length(); i++) {
			int count = 0;
			boolean present = false;
			for (int j = 0; j < i; j++) {
				if (s.charAt(i) == s.charAt(j)) {
					present = true;
					break;
				}
			}
			if (present == false) {
				for (int j = 0; j < s.length(); j++) {
					if (s.charAt(i) == s.charAt(j)) {
						count++;
					}

				}
				if(count==1)
				{
				System.out.println(s.charAt(i));
				}
			}

		}

	}
}

6.	Develop a Java program to check if a string has all unique characters.
public class Unique_charecters {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a string ");
		String s=sc.next();
		String s1="";
		for (int i = 0; i < s.length(); i++) {
			int count = 0;
			boolean present = false;
			for (int j = 0; j < i; j++) {
				if (s.charAt(i) == s.charAt(j)) {
					present = true;
					break;
				}
			}
			if (present == false) {
				for (int j = 0; j < s.length(); j++) {
					if (s.charAt(i) != s.charAt(j)) {
						s1 +=s.charAt(i);
						break;
					}

				}
				
			}

		}
		if(s1.equals(s))
		{
			System.out.println("there is no repeted values present in this string "+ s);
		}else
		{
			System.out.println("the string have some repeted valus");
		}

	}
}


7.	Implement a Java function to perform basic string compression using the counts of repeated characters.

public class Compressofastring_intorepetedvalues {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a String");
		String s=sc.next();
		for (int i = 0; i <s.length(); i++) {
			boolean present=false;
			int count=0;
			for (int j = 0; j < i; j++) {
				if(s.charAt(i)==s.charAt(j))
				{
					present =true;
					break;
					
				}
			}
			if(present==false)
			{
				for (int j = 0; j <s.length(); j++) {
					if(s.charAt(i)==s.charAt(j))
					{
						count++;
					}
				}
				System.out.print(s.charAt(i)+""+count);
			}
		}
	}
}

8.	Write a Java function to implement substring search in a string.

public class Substring {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a string");
		String s=sc.nextLine();
		System.out.println("enter a number for scarch a sub string");
		int n=sc.nextInt();
		if(n<=s.length())
		{
			System.out.println("sub part of a string is : ");
			System.out.println(s.substring(n));
			
		}
		
	}
}

9.	Develop a Java program to reverse the order of words in a given string.

public class Revesre_wordsinastring {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a string");
		String s=sc.nextLine();
		
		 String [] str=s.split(" ");
		 for (int i = str.length-1; i >=0; i--) {
			System.out.print(str[i]+" ");
		}
		 
	}
}

10.	Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another.

public class Anagram_Strings {
	public static String sorted(String str)
	{
		String s1="";
		char []ch=str.toCharArray();
		for (int i = 0; i < ch.length; i++) {
			for (int j = i+1; j < ch.length; j++) {
				if(ch[i]>ch[j])
				{
					char temp=ch[j];
					ch[j]=ch[i];
					ch[i]=temp;
				}
				
			}
		}
		for (int i = 0; i < ch.length; i++) {
			s1 +=ch[i];
		}
		return s1;
		
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("enter a String");
		String s=sc.next();
		System.out.println("enter another string value");
		String so=sc.next();
		String s1 = sorted(s);
		String s2 = sorted(so);
		if(s1.equals(s2))
		{
			System.out.println("Anagram");
			
		}else
		{
			System.out.println("Not Anagram");
		}
		
	}
}




